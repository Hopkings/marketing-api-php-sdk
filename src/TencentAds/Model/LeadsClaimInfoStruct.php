<?php
/**
 * LeadsClaimInfoStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * LeadsClaimInfoStruct Class Doc Comment
 *
 * @category Class
 * @description 回传信息结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsClaimInfoStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'leads_claim_info_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'outerLeadsId' => 'string',
        'leadsUserType' => '\TencentAds\Model\LeadsUserType',
        'leadsUserWechatAppid' => 'string',
        'leadsUserId' => 'string',
        'campaignId' => 'int',
        'adgroupId' => 'int',
        'wechatAgencyId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'outerLeadsId' => null,
        'leadsUserType' => null,
        'leadsUserWechatAppid' => null,
        'leadsUserId' => null,
        'campaignId' => 'int64',
        'adgroupId' => 'int64',
        'wechatAgencyId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outerLeadsId' => 'outer_leads_id',
        'leadsUserType' => 'leads_user_type',
        'leadsUserWechatAppid' => 'leads_user_wechat_appid',
        'leadsUserId' => 'leads_user_id',
        'campaignId' => 'campaign_id',
        'adgroupId' => 'adgroup_id',
        'wechatAgencyId' => 'wechat_agency_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outerLeadsId' => 'setOuterLeadsId',
        'leadsUserType' => 'setLeadsUserType',
        'leadsUserWechatAppid' => 'setLeadsUserWechatAppid',
        'leadsUserId' => 'setLeadsUserId',
        'campaignId' => 'setCampaignId',
        'adgroupId' => 'setAdgroupId',
        'wechatAgencyId' => 'setWechatAgencyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outerLeadsId' => 'getOuterLeadsId',
        'leadsUserType' => 'getLeadsUserType',
        'leadsUserWechatAppid' => 'getLeadsUserWechatAppid',
        'leadsUserId' => 'getLeadsUserId',
        'campaignId' => 'getCampaignId',
        'adgroupId' => 'getAdgroupId',
        'wechatAgencyId' => 'getWechatAgencyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['outerLeadsId'] = isset($data['outerLeadsId']) ? $data['outerLeadsId'] : null;
        $this->container['leadsUserType'] = isset($data['leadsUserType']) ? $data['leadsUserType'] : null;
        $this->container['leadsUserWechatAppid'] = isset($data['leadsUserWechatAppid']) ? $data['leadsUserWechatAppid'] : null;
        $this->container['leadsUserId'] = isset($data['leadsUserId']) ? $data['leadsUserId'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['adgroupId'] = isset($data['adgroupId']) ? $data['adgroupId'] : null;
        $this->container['wechatAgencyId'] = isset($data['wechatAgencyId']) ? $data['wechatAgencyId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outerLeadsId
     *
     * @return string
     */
    public function getOuterLeadsId()
    {
        return $this->container['outerLeadsId'];
    }

    /**
     * Sets outerLeadsId
     *
     * @param string $outerLeadsId outerLeadsId
     *
     * @return $this
     */
    public function setOuterLeadsId($outerLeadsId)
    {
        $this->container['outerLeadsId'] = $outerLeadsId;

        return $this;
    }

    /**
     * Gets leadsUserType
     *
     * @return \TencentAds\Model\LeadsUserType
     */
    public function getLeadsUserType()
    {
        return $this->container['leadsUserType'];
    }

    /**
     * Sets leadsUserType
     *
     * @param \TencentAds\Model\LeadsUserType $leadsUserType leadsUserType
     *
     * @return $this
     */
    public function setLeadsUserType($leadsUserType)
    {
        $this->container['leadsUserType'] = $leadsUserType;

        return $this;
    }

    /**
     * Gets leadsUserWechatAppid
     *
     * @return string
     */
    public function getLeadsUserWechatAppid()
    {
        return $this->container['leadsUserWechatAppid'];
    }

    /**
     * Sets leadsUserWechatAppid
     *
     * @param string $leadsUserWechatAppid leadsUserWechatAppid
     *
     * @return $this
     */
    public function setLeadsUserWechatAppid($leadsUserWechatAppid)
    {
        $this->container['leadsUserWechatAppid'] = $leadsUserWechatAppid;

        return $this;
    }

    /**
     * Gets leadsUserId
     *
     * @return string
     */
    public function getLeadsUserId()
    {
        return $this->container['leadsUserId'];
    }

    /**
     * Sets leadsUserId
     *
     * @param string $leadsUserId leadsUserId
     *
     * @return $this
     */
    public function setLeadsUserId($leadsUserId)
    {
        $this->container['leadsUserId'] = $leadsUserId;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param int $campaignId campaignId
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets adgroupId
     *
     * @return int
     */
    public function getAdgroupId()
    {
        return $this->container['adgroupId'];
    }

    /**
     * Sets adgroupId
     *
     * @param int $adgroupId adgroupId
     *
     * @return $this
     */
    public function setAdgroupId($adgroupId)
    {
        $this->container['adgroupId'] = $adgroupId;

        return $this;
    }

    /**
     * Gets wechatAgencyId
     *
     * @return string
     */
    public function getWechatAgencyId()
    {
        return $this->container['wechatAgencyId'];
    }

    /**
     * Sets wechatAgencyId
     *
     * @param string $wechatAgencyId wechatAgencyId
     *
     * @return $this
     */
    public function setWechatAgencyId($wechatAgencyId)
    {
        $this->container['wechatAgencyId'] = $wechatAgencyId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


