<?php
/**
 * AdParamGetRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AdParamGetRequest Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdParamGetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdParamGetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'int',
        'campaignType' => '\TencentAds\Model\CampaignType',
        'creativeTemplateId' => 'int',
        'mediaPlacementGroupId' => 'int',
        'dynamicAdCategory' => 'int',
        'promotedObjectType' => '\TencentAds\Model\PromotedObjectType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => 'int64',
        'campaignType' => null,
        'creativeTemplateId' => 'int64',
        'mediaPlacementGroupId' => 'int64',
        'dynamicAdCategory' => 'int64',
        'promotedObjectType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
        'campaignType' => 'campaign_type',
        'creativeTemplateId' => 'creative_template_id',
        'mediaPlacementGroupId' => 'media_placement_group_id',
        'dynamicAdCategory' => 'dynamic_ad_category',
        'promotedObjectType' => 'promoted_object_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'campaignType' => 'setCampaignType',
        'creativeTemplateId' => 'setCreativeTemplateId',
        'mediaPlacementGroupId' => 'setMediaPlacementGroupId',
        'dynamicAdCategory' => 'setDynamicAdCategory',
        'promotedObjectType' => 'setPromotedObjectType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'campaignType' => 'getCampaignType',
        'creativeTemplateId' => 'getCreativeTemplateId',
        'mediaPlacementGroupId' => 'getMediaPlacementGroupId',
        'dynamicAdCategory' => 'getDynamicAdCategory',
        'promotedObjectType' => 'getPromotedObjectType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['campaignType'] = isset($data['campaignType']) ? $data['campaignType'] : null;
        $this->container['creativeTemplateId'] = isset($data['creativeTemplateId']) ? $data['creativeTemplateId'] : null;
        $this->container['mediaPlacementGroupId'] = isset($data['mediaPlacementGroupId']) ? $data['mediaPlacementGroupId'] : null;
        $this->container['dynamicAdCategory'] = isset($data['dynamicAdCategory']) ? $data['dynamicAdCategory'] : null;
        $this->container['promotedObjectType'] = isset($data['promotedObjectType']) ? $data['promotedObjectType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return int
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets campaignType
     *
     * @return \TencentAds\Model\CampaignType
     */
    public function getCampaignType()
    {
        return $this->container['campaignType'];
    }

    /**
     * Sets campaignType
     *
     * @param \TencentAds\Model\CampaignType $campaignType campaignType
     *
     * @return $this
     */
    public function setCampaignType($campaignType)
    {
        $this->container['campaignType'] = $campaignType;

        return $this;
    }

    /**
     * Gets creativeTemplateId
     *
     * @return int
     */
    public function getCreativeTemplateId()
    {
        return $this->container['creativeTemplateId'];
    }

    /**
     * Sets creativeTemplateId
     *
     * @param int $creativeTemplateId creativeTemplateId
     *
     * @return $this
     */
    public function setCreativeTemplateId($creativeTemplateId)
    {
        $this->container['creativeTemplateId'] = $creativeTemplateId;

        return $this;
    }

    /**
     * Gets mediaPlacementGroupId
     *
     * @return int
     */
    public function getMediaPlacementGroupId()
    {
        return $this->container['mediaPlacementGroupId'];
    }

    /**
     * Sets mediaPlacementGroupId
     *
     * @param int $mediaPlacementGroupId mediaPlacementGroupId
     *
     * @return $this
     */
    public function setMediaPlacementGroupId($mediaPlacementGroupId)
    {
        $this->container['mediaPlacementGroupId'] = $mediaPlacementGroupId;

        return $this;
    }

    /**
     * Gets dynamicAdCategory
     *
     * @return int
     */
    public function getDynamicAdCategory()
    {
        return $this->container['dynamicAdCategory'];
    }

    /**
     * Sets dynamicAdCategory
     *
     * @param int $dynamicAdCategory dynamicAdCategory
     *
     * @return $this
     */
    public function setDynamicAdCategory($dynamicAdCategory)
    {
        $this->container['dynamicAdCategory'] = $dynamicAdCategory;

        return $this;
    }

    /**
     * Gets promotedObjectType
     *
     * @return \TencentAds\Model\PromotedObjectType
     */
    public function getPromotedObjectType()
    {
        return $this->container['promotedObjectType'];
    }

    /**
     * Sets promotedObjectType
     *
     * @param \TencentAds\Model\PromotedObjectType $promotedObjectType promotedObjectType
     *
     * @return $this
     */
    public function setPromotedObjectType($promotedObjectType)
    {
        $this->container['promotedObjectType'] = $promotedObjectType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


